{"version":3,"sources":["header/Header.js","common/Button.js","common/Input.js","form/SubscribeForm.js","events/Event.js","events/Events.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","Button","children","props","Input","SubscribeForm","subscribe","useState","address","setAddress","topic","setTopic","placeholder","value","onChange","e","target","type","onClick","Event","event","Events","events","map","key","id","window","ws","send","JSON","stringify","action","defaultEvents","App","setEvents","onmessage","formatted","parse","data","slice","Boolean","location","hostname","match","WebSocket","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wZAGe,SAASA,IACtB,OAAO,4BAAQC,UAAU,iBACvB,wBAAIA,UAAU,gBAAd,eACA,yBAAKA,UAAU,oBAAf,uCAEU,uBAAGC,KAAK,0BAAR,gBAFV,M,uBCHW,SAASC,EAAT,GAAuD,IAAtCC,EAAqC,EAArCA,SAAqC,IAA3BH,iBAA2B,MAAf,GAAe,EAARI,EAAQ,wCACnE,OAAO,0CAAQJ,UAAS,UAAKA,EAAL,mBAAoCI,GAAQD,G,MCDvD,SAASE,EAAT,GAAqD,EAArCF,SAAsC,IAAD,IAA3BH,iBAA2B,MAAf,GAAe,EAARI,EAAQ,wCAClE,OAAO,yCAAOJ,UAAS,UAAKA,EAAL,iBAAkCI,ICqB5CE,MApBf,YAAuC,IAAdC,EAAa,EAAbA,UAAa,EACNC,mBAAS,IADH,mBAC7BC,EAD6B,KACpBC,EADoB,OAEVF,mBAAS,IAFC,mBAE7BG,EAF6B,KAEtBC,EAFsB,KAGpC,OACE,0BAAMZ,UAAU,sBACd,2BAAOA,UAAU,uBACf,0BAAMA,UAAU,4BAAhB,WACA,kBAAC,EAAD,CAAOA,UAAU,sBAAsBa,YAAY,WAAWC,MAAOL,EAASM,SAAU,SAAAC,GAAC,OAAIN,EAAWM,EAAEC,OAAOH,WAEnH,2BAAOd,UAAU,uBACf,0BAAMA,UAAU,4BAAhB,SACA,kBAAC,EAAD,CAAOA,UAAU,sBAAsBa,YAAY,WAAWC,MAAOH,EAAOI,SAAU,SAAAC,GAAC,OAAIJ,EAASI,EAAEC,OAAOH,WAE/G,kBAAC,EAAD,CAAQd,UAAU,uBAAuBkB,KAAK,SAASC,QAAS,kBAAMZ,EAAUE,EAASE,KAAzF,e,YCLSS,MAVf,YAA2B,IAAVC,EAAS,EAATA,MACf,OACE,wBAAIrB,UAAU,YACZ,0BAAMA,UAAU,cACbqB,KCKMC,MARf,YAAkC,IAAD,IAAfC,cAAe,MAAN,GAAM,EAC/B,OACE,wBAAIvB,UAAU,aACXuB,EAAOC,KAAI,SAAAH,GAAK,OAAI,kBAAC,EAAD,CAAOI,IAAKJ,EAAMK,GAAIL,MAAOA,SCgBxD,SAASd,EAAUE,EAASE,GAC1BgB,OAAOC,GAAGC,KAAKC,KAAKC,UAAU,CAAEC,OAAQ,YAAavB,UAASE,WAGhE,IAAMsB,EAAgB,CACpBH,KAAKC,UAAU,CACb,SAAW,EACX,SAAY,IACZ,iBAAoB,GACpB,gBAAmB,qEACnB,UAAa,qEACb,YAAe,SACf,QAAW,6CACX,KAAQ,qEACR,OAAU,CACR,qEAAsE,qEAAsE,sEAE9I,GAAM,gBACL,KAAM,IAGIG,EArCf,WAAgB,IAAD,EACe1B,mBAASyB,GADxB,mBACNV,EADM,KACEY,EADF,KAOb,OALAR,OAAOC,GAAGQ,UAAY,SAACf,GACrB,IAAMgB,EAAYP,KAAKC,UAAUD,KAAKQ,MAAMjB,EAAMkB,MAAO,KAAM,GAC/DJ,EAAU,CAACE,GAAF,mBAAgBd,EAAOiB,MAAM,EAAG,QAIzC,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAejC,UAAWA,IAC1B,kBAAC,EAAD,CAAQgB,OAAQA,MCNFkB,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNjB,OAAOC,GAAK,IAAIiB,UAAU,uBAE1BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e549422a.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.css'\n\nexport default function Header() {\n  return <header className=\"Header-header\">\n    <h1 className=\"Header-title\">Etherstream</h1>\n    <div className=\"Header-paragraph\">\n      Stream ethereum event logs.\n      Made by <a href=\"http://elliotplant.com\">Elliot Plant</a>.\n    </div>\n  </header>\n}\n","import React from 'react';\nimport './Button.css'\n\nexport default function Button({children, className = '', ...props}) {\n  return <button className={`${className} Button-button`} {...props}>{children}</button>\n}\n","import React from 'react';\nimport './Input.css'\n\nexport default function Input({children, className = '', ...props}) {\n  return <input className={`${className} Input-input`} {...props} />\n}\n","import React, {useState} from 'react';\nimport './SubscribeForm.css';\nimport Button from '../common/Button.js'\nimport Input from '../common/Input.js'\n\nfunction SubscribeForm({ subscribe }) {\n  const [address, setAddress] = useState('');\n  const [topic, setTopic] = useState('');\n  return (\n    <form className=\"SubscribeForm-form\">\n      <label className=\"SubscribeForm-label\">\n        <span className=\"SubscribeForm-label-text\">Address</span>\n        <Input className=\"SubscribeForm-input\" placeholder=\"0x123...\" value={address} onChange={e => setAddress(e.target.value)}/>\n      </label>\n      <label className=\"SubscribeForm-label\">\n        <span className=\"SubscribeForm-label-text\">Topic</span>\n        <Input className=\"SubscribeForm-input\" placeholder=\"0x123...\" value={topic} onChange={e => setTopic(e.target.value)}/>\n      </label>\n      <Button className=\"SubscribeForm-button\" type=\"button\" onClick={() => subscribe(address, topic)}>\n        Subscribe\n      </Button>\n    </form>\n  );\n}\n\nexport default SubscribeForm;\n","import React from 'react';\nimport './Event.css';\n\nfunction Event({ event }) {\n  return (\n    <li className=\"Event-li\">\n      <code className=\"Event-code\">\n        {event}\n      </code>\n    </li>\n  );\n}\n\nexport default Event;\n","import React from 'react';\nimport './Events.css';\nimport Event from './Event.js'\n\nfunction Events({ events = [] }) {\n  return (\n    <ul className=\"Events-ul\">\n      {events.map(event => <Event key={event.id} event={event} />)}\n    </ul>\n  );\n}\n\nexport default Events;\n","import React, {useState} from 'react';\nimport './App.css';\nimport './colors.css';\nimport Header from './header/Header.js'\nimport SubscribeForm from './form/SubscribeForm.js'\nimport Events from './events/Events.js'\n\nfunction App() {\n  const [events, setEvents] = useState(defaultEvents);\n  window.ws.onmessage = (event) => {\n    const formatted = JSON.stringify(JSON.parse(event.data), null, 2);\n    setEvents([formatted, ...events.slice(0, 10)])\n  }\n\n  return (\n    <>\n      <Header />\n      <SubscribeForm subscribe={subscribe} />\n      <Events events={events} />\n    </>\n  );\n}\n\nfunction subscribe(address, topic) {\n  window.ws.send(JSON.stringify({ action: 'subscribe', address, topic }))\n}\n\nconst defaultEvents = [\n  JSON.stringify({\n    \"removed\": false,\n    \"logIndex\": 122,\n    \"transactionIndex\": 86,\n    \"transactionHash\": \"0x41de23c23f4ad52e592fcca96032bee41aa59521d448e98e22adca5e22fc2ae8\",\n    \"blockHash\": \"0xf1143e12634b7f748696b3f731ef0327c750f12c5e220914c977540d1d43c3ac\",\n    \"blockNumber\": 10413545,\n    \"address\": \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n    \"data\": \"0x000000000000000000000000000000000000000000002fa54641bae8aaa00000\",\n    \"topics\": [\n      \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\", \"0x0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643\", \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n    ],\n    \"id\": \"log_b78ff9ee\"\n  }, null, 2)\n]\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nwindow.ws = new WebSocket('ws://localhost:8080')\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["serviceWorker.js","client/Context.js","client/WebSocketClient.js","header/Header.js","common/Button.js","common/Input.js","form/SubscribeForm.js","events/Event.js","events/Events.js","App.js","ClientConnectionWrapper.js","index.js"],"names":["Boolean","window","location","hostname","match","WebSocketContext","React","createContext","noop","WebSocketClient","url","onOpen","onClose","onError","this","waitingRequests","subscriptions","timeout","socket","WebSocket","onopen","console","log","onclose","onerror","event","onmessage","handleMessage","JSON","parse","data","catch","error","message","requestID","stringify","subscriptionID","Promise","resolve","reject","makeRequestID","response","setTimeout","Error","send","subscriptionDataHandler","subscriptionData","action","Date","now","Math","floor","random","Header","className","href","Button","children","props","Input","localStorageAddress","localStorage","getItem","localStorageTopic","SubscribeForm","subscribe","useState","address","setAddress","topic","setTopic","placeholder","value","onChange","e","setItem","storeAddress","target","storeTopic","type","onClick","Event","Events","events","map","key","id","App","socketConnected","setEvents","subscriptionError","setSubscriptionError","setSubscriptions","wsClient","useContext","a","slice","subscriptionResponse","style","textAlign","s","singletonWebsocketClient","ClientConnectionWrapper","setSocketConnected","connect","Provider","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.05ab9a53.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\n\nconst WebSocketContext = React.createContext({});\n\nexport default WebSocketContext;\n","const noop = () => {};\n\nexport default class WebSocketClient {\n  constructor(url, { onOpen = noop, onClose = noop, onError = noop } = {}) {\n    this.url = url;\n    this.waitingRequests = {};\n    this.subscriptions = {};\n    this.timeout = 10000;\n    this.onOpen = onOpen;\n    this.onClose = onClose;\n    this.onError = onError;\n  }\n\n  connect() {\n    this.socket = new WebSocket(this.url);\n    this.socket.onopen = () => console.log(\"connected\") || this.onOpen();\n    this.socket.onclose = () => this.onClose();\n    this.socket.onerror = event => this.onError(event);\n    this.socket.onmessage = event => this.handleMessage(JSON.parse(event.data)).catch(console.error);\n  }\n\n  async handleMessage(message) {\n    if (this.waitingRequests[message.requestID]) {\n      try {\n        await this.waitingRequests[message.requestID](message);\n      } catch (e) {\n        console.error(\n          `Error handling request from message ${JSON.stringify(message)}`\n        );\n      }\n    } else if (this.subscriptions[message.subscriptionID]) {\n      try {\n        await this.subscriptions[message.subscriptionID](message);\n      } catch (e) {\n        console.error(\n          `Error handling subscription from message ${JSON.stringify(message)}`\n        );\n      }\n    }\n  }\n\n  send(message) {\n    return new Promise((resolve, reject) => {\n      const requestID = message.requestID || this.makeRequestID();\n      message = { requestID, ...message };\n      this.waitingRequests[requestID] = (response) => {\n        resolve(response);\n        delete this.waitingRequests[requestID];\n      };\n      setTimeout(() => reject(new Error(`Request ${requestID} timed out after ${this.timeout} ms`)), this.timeout);\n      this.socket.send(JSON.stringify(message));\n    });\n  }\n\n  subscribe(message, subscriptionDataHandler) {\n    const subscriptionID = message.subscriptionID || this.makeRequestID();\n    this.subscriptions[subscriptionID] = subscriptionData => subscriptionDataHandler(subscriptionData);\n    return this.send({ action: 'subscribe', subscriptionID, ...message });\n  }\n\n  makeRequestID() {\n    return `${Date.now()}-${Math.floor(Math.random() * 1000000)}`;\n  }\n}\n","import React from 'react'\nimport './Header.css'\n\nexport default function Header() {\n  return <header className=\"Header-header\">\n    <h1 className=\"Header-title\">Etherstream</h1>\n    <div className=\"Header-paragraph\">\n      Stream ethereum event logs.\n      Made by <a href=\"http://elliotplant.com\">Elliot Plant</a>.\n    </div>\n  </header>\n}\n","import React from 'react';\nimport './Button.css'\n\nexport default function Button({children, className = '', ...props}) {\n  return <button className={`${className} Button-button`} {...props}>{children}</button>\n}\n","import React from 'react';\nimport './Input.css'\n\nexport default function Input({children, className = '', ...props}) {\n  return <input className={`${className} Input-input`} {...props} />\n}\n","import React, { useState } from \"react\";\nimport \"./SubscribeForm.css\";\nimport Button from \"../common/Button.js\";\nimport Input from \"../common/Input.js\";\n\nconst localStorageAddress = localStorage.getItem(\"address\") || '';\nconst localStorageTopic = localStorage.getItem(\"topic\") || '';\n\nfunction SubscribeForm({ subscribe }) {\n  const [address, setAddress] = useState(localStorageAddress);\n  const [topic, setTopic] = useState(localStorageTopic);\n\n  const storeAddress = address => {\n    setAddress(address);\n    localStorage.setItem(\"address\", address);\n  };\n\n  const storeTopic = topic => {\n    setTopic(topic);\n    localStorage.setItem(\"topic\", topic);\n  };\n\n  return (\n    <form className=\"SubscribeForm-form\">\n      <label className=\"SubscribeForm-label\">\n        <span className=\"SubscribeForm-label-text\">Address</span>\n        <Input\n          className=\"SubscribeForm-input\"\n          placeholder=\"0x123...\"\n          value={address}\n          onChange={e => storeAddress(e.target.value)}\n        />\n      </label>\n      <label className=\"SubscribeForm-label\">\n        <span className=\"SubscribeForm-label-text\">Topic</span>\n        <Input\n          className=\"SubscribeForm-input\"\n          placeholder=\"0x123...\"\n          value={topic}\n          onChange={e => storeTopic(e.target.value)}\n        />\n      </label>\n      <Button\n        className=\"SubscribeForm-button\"\n        type=\"button\"\n        onClick={() => subscribe(address, topic)}\n      >\n        Subscribe\n      </Button>\n    </form>\n  );\n}\n\nexport default SubscribeForm;\n","import React from 'react';\nimport './Event.css';\n\nfunction Event({ event }) {\n  return (\n    <li className=\"Event-li\">\n      <code className=\"Event-code\">\n        {event}\n      </code>\n    </li>\n  );\n}\n\nexport default Event;\n","import React from 'react';\nimport './Events.css';\nimport Event from './Event.js'\n\nfunction Events({ events = [] }) {\n  return (\n    <ul className=\"Events-ul\">\n      {events.map(event => <Event key={event.id} event={event} />)}\n    </ul>\n  );\n}\n\nexport default Events;\n","import React, { useState, useContext } from \"react\";\nimport './App.css';\nimport './colors.css';\nimport Header from './header/Header.js'\nimport SubscribeForm from './form/SubscribeForm.js'\nimport Events from './events/Events.js'\nimport WebSocketContext from \"./client/Context\";\n\nfunction App({ socketConnected }) {\n  const [events, setEvents] = useState([]);\n  const [subscriptionError, setSubscriptionError] = useState(null);\n  const [subscriptions, setSubscriptions] = useState([]);\n  const wsClient = useContext(WebSocketContext);\n\n  const subscribe = async (address, topic) => {\n    console.log('subscribing', address, topic);\n    try {\n      const subscriptionResponse = await wsClient.subscribe({ address, topic }, ({ event }) => {\n        setEvents(events => ([ event, ...events.slice(0, 10), ]))\n      });\n      setSubscriptions([subscriptionResponse, ...subscriptions]);\n    } catch (error) {\n      console.error(error);\n      setSubscriptionError(error);\n    }\n  }\n\n  return (\n    <>\n      <Header />\n      {socketConnected ? <SubscribeForm subscribe={subscribe} /> : <p style={{textAlign: 'center'}}>Connecting to server</p>}\n      {subscriptionError && <p>{subscriptionError.message}</p>}\n      {subscriptions.map(s => <div key={s.subscriptionID}>{s.subscriptionID}</div>)}\n      <Events events={events} />\n    </>\n  );\n}\n\nexport default App;\n","import React, {useState} from 'react';\nimport WebSocketContext from './client/Context';\nimport WebSocketClient from './client/WebSocketClient';\nimport App from './App';\n\nconst apiURL = process.env.NODE_ENV === 'production' ? 'ws://api.etherstream.io' : 'ws://localhost:8080';\n\nlet singletonWebsocketClient = null;\n\nexport default function ClientConnectionWrapper() {\n  const [socketConnected, setSocketConnected] = useState(false)\n\n  if (!singletonWebsocketClient) {\n    singletonWebsocketClient = new WebSocketClient(apiURL);\n    singletonWebsocketClient.connect()\n  }\n\n  singletonWebsocketClient.onOpen = () => setSocketConnected(true)\n  singletonWebsocketClient.onClose = () => setSocketConnected(false);\n\n  return <WebSocketContext.Provider value={singletonWebsocketClient}>\n    <App socketConnected={socketConnected}/>\n  </WebSocketContext.Provider>;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport ClientConnectionWrapper from './ClientConnectionWrapper'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ClientConnectionWrapper />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}